/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
//since the count of divisors can be efficiently computed from the prime number factorization: If
//n=p1^e1*p2^e2*...*pk^ek
//is the factorization of n into prime numbers pi with exponents ei, then
//Ïƒ0(n)=(e1+1)(e2+1)...(ek+1)
//is the number of divisors of n
//500=(e1+1)*(e2+1)*...*(ek+1)
const {factorice} = require('./common/factorice');
/**
 * @param {Array} factorization the factorization of a number factorice(500)) [ 1, 2, 2, 5, 5, 5 ]
 */
function numberOfDivisors(factorization){
    factorization.shift()
    var count={}
    factorization.forEach(e=>{
        if (!count[e]) count[e]=1;
        else count[e]++
    })
    var count2=1
    for (let value of Object.keys(count)) {
        count2*=count[value]+1;
    }
    return count2
}

function triangleNumber(n){
    return (1+n)/2*n
}
var myNumber=1
while (numberOfDivisors(factorice(triangleNumber(myNumber)))<500) {
    myNumber++
}
const t=triangleNumber(myNumber);
const f=factorice(t);
const d=numberOfDivisors(f);
console.log(t)